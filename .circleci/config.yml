version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3.1
  aws-cli: circleci/aws-cli@3.1.3

jobs:
  setup-environment:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
            keys:
              - v1-dependencies-{{ checksum "requirements.txt" }}
              - v1-dependencies-
      - run:
          name: Install Dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv  # TODO: Include in cache the "bin" directory
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Run lint
          command: |
            . venv/bin/activate
            make lint
  
  build-docker:
    docker:
      - image: docker:latest
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: install dependencies
          command: |
            apk update && apk add bash
      - run:
          name: build docker
          command: |
            sh ./run_docker.sh
      - run:
          name: upload docker into the docker hub
          command: |
            sh ./upload_docker.sh

  deploy-eks:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      # - run: yum -y install tar gzip
      - run: apk add --update tar gzip nodejs npm curl 
      - run: pip install awscli
      - run: aws --version
      - run:
          name: install aws eks
          command: |
            sh ./install_eksctl.sh
      - run:
          name: install kubectl
          command: |
            sh ./install_kubectl.sh
      - run:
          name: create aws eks cluster
          command: |
            eksctl create cluster --name mycapstoneCluster --region=us-east-1
            eksctl utils describe-stacks --region=us-east-1 --cluster=mycapstoneCluster
            eksctl get cluster --name=mycapstoneCluster --region=us-east-1

workflows:
  default:
    jobs:
      - setup-environment
      # - build-docker:
      #     requires: [setup-environment]
      # - deploy-eks:
      #     requires: [build-docker]