version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2
  kubernetes: circleci/kubernetes@1.3
  aws-cli: circleci/aws-cli@3.1
commands:
  install-aws-iam-authenticator:
    description: Install aws-iam-authenticator
    steps:
      - run:
          name: Install aws-iam-authenticator
          command: |
            curl -o aws-iam-authenticator curl -o aws-iam-authenticator \
              https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator

  install-awscli-gettext:
    description: Install awscli and gettext-base
    steps:
      - run:
          name: Install awscli and gettext-base
          command: |
            sudo apt update
            sudo apt-get install awscli
            sudo apt-get install gettext-base

  destroy-environment:
    description: Destroy resources while deploy fail.
    parameters:
      cluster_name:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            eksctl delete cluster --region=us-east-1 --name=<<parameters.cluster_name>>


jobs:
  setup-environment:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
            keys:
              - v1-dependencies-{{ checksum "requirements.txt" }}
              - v1-dependencies-
      - run:
          name: Install Dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv  # TODO: Include in cache the "bin" directory
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Run lint
          command: |
            . venv/bin/activate
            make lint
  
  build-and-upload-docker:
    docker:
      - image: docker:latest
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: install dependencies
          command: |
            apk update && apk add bash
      - run:
          name: build docker
          command: |
            sh ./command/run_docker.sh
      - run:
          name: upload docker into the docker hub
          command: |
            sh ./command/upload_docker.sh

  eks-deploy:
    docker:
      - image: "cimg/python:3.10"
    steps:
      - checkout
      - aws-cli/setup
      - aws-eks/create-cluster:
          cluster-name: ourmemoryapp
          nodegroup-name: ourmemoryapp-nodes
          node-type: t3.medium
          nodes-min: 2
          nodes-max: 3
      - destroy-environment:
          cluster_name: ourmemoryapp

  run-app-deploy:
    docker:
      - image: "cimg/python:3.10"
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: ourmemoryapp
          install-kubectl: true
      - run:
          name: Test Kubernetes
          command: |  
            kubectl get services
            kubectl get nodes

      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: "infra/deployment.yaml"
          resource-name: deployment/ourmemoryapp
          show-kubectl-command: true

      - kubernetes/create-or-update-resource:
          resource-file-path: "infra/service.yaml"
          show-kubectl-command: true

      - run:
          name: Check deploy status
          command: kubectl get svc ourmemoryapp

      - run:
          name: Testing deployments
          command: |
            kubectl get deployments

      - run:
          name: Testing pods
          command: |
            kubectl get pods

      - run:
          name: Testing services
          command: |
            kubectl get services

      - run:
          name: find the load balancer's IP address
          command: |
            kubectl describe services ourmemoryapp
      - destroy-environment:
          cluster_name: ourmemoryapp

workflows:
  default:
    jobs:
      - setup-environment
      - build-and-upload-docker:
          requires: [setup-environment]
          filters:
            branches:
              only: [main]
      - eks-deploy:
          requires: [build-and-upload-docker]
      - run-app-deploy:
          requires: [eks-deploy]